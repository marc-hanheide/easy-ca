#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Derek Moore <derek@ripple.com>
# Christian GÃ¶ttsche <cgzones@googlemail.com>

export TZ=
# Binaries copied during install
export BINARIES_ROOT="
create-signing-ca
create-server
create-client
sign-csr
sign-ssh
revoke-cert
functions
show-status
gen-html
"

export TEMPLATES_ROOT="
clients.tpl
server.tpl
signing.tpl
root_index.tpl
sign_index.tpl
"

export BINARIES_SIGN="
create-server
create-client
sign-csr
sign-ssh
revoke-cert
functions
show-status
gen-html
"

export TEMPLATES_SIGN="
clients.tpl
server.tpl
sign_index.tpl
"

# Output highlighting

NOTE="\033[35;1m[*]\033[0m"
SUCC="\033[32;1m[!]\033[0m"
INPUT="\033[36;1m[>]\033[0m"
ERR="\033[31;1m[!]\033[0m"


fullpath() {
    cd "$(dirname "$1")" || exit 2
    echo "$PWD/$(basename "$1")"
}

##
## template TEMPLATE_FILE DESTINATION_FILE
##
## Performs variable interpolation on TEMPLATE_FILE and copies
## the result to DESTINATION_FILE. All strings in TEMPLATE_FILE
## that match {{CA_*}} will be replaced with the contents of the
## environment variable with the same name.
##
template() {
    local REGEX=""
    for VAR in ${!CA_*}; do
        REGEX="${REGEX}s#{{\s*${VAR}\s*}}#${!VAR}#g; "
    done
    sed -e "${REGEX}" < "$1" > "$2"
}


##
## init_ca_home CA_PATH
##
## Initializes a CA directory skeleton at PATH
##
init_ca_home() {
    CA_HOME="$1"

    # Ensure we're initializing an empty directory
    if [ -d "${CA_HOME}" ]; then
        echo -e "$ERR Directory '${CA_HOME}' already exists, exiting."
        exit 1
    fi

    if ! mkdir -p "${CA_HOME}"; then
        echo -e "$ERR Unable to create directory '${CA_HOME}', exiting."
        exit 1
    fi

    echo -e "$NOTE Initializing CA home"

    pushd "${CA_HOME}" > /dev/null

    # Create top-level CA structure
    mkdir ca
    mkdir ca/archive
    mkdir ca/crl
    mkdir ca/db
    mkdir ca/private

    mkdir bin
    mkdir certs
    mkdir certs/clients
    mkdir certs/server

    # Create empty databases
    touch ca/db/certificate.db
    touch ca/db/certificate.db.attr
    echo 01 > ca/db/crt.srl
    echo 01 > ca/db/crl.srl

    popd > /dev/null
}

##
## generate_conf CONF
##
## Generate the ca.conf for new root and signing CAs
##
generate_conf() {
    DEST="$1"

    echo -e -n "$INPUT Enable PKCS11 Engine for this CA? [y/N]: "
    read -r ENABLE_ENGINE
    if [ "${ENABLE_ENGINE}" == "y" ] || [ "${ENABLE_ENGINE}" == "Y" ]; then
        CA_ENABLE_ENGINE="${ENABLE_ENGINE}"
    else
        CA_ENABLE_ENGINE=
    fi

    echo -e -n "$INPUT Short label for new CA [${CA_NAME}]: "
    read -r NAME
    if [ -n "${NAME}" ]; then
        CA_NAME=$(echo "${NAME}" | sed 's/[^A-Za-z0-9-]/-/g')
    fi

    echo -e -n "$INPUT Domain name for new CA [${CA_DOMAIN}]: "
    read -r DOMAIN
    if [ -n "${DOMAIN}" ]; then
        CA_DOMAIN="${DOMAIN}"
    elif [ -z "${CA_DOMAIN}" ]; then
        echo -e "$ERR Domain is required."
        exit 1
    fi

    echo
    echo -e "$SUCC CRL URL will be https://${CA_DOMAIN}/ca/${CA_NAME}.crl"
    echo

    echo -e -n "$INPUT Default country code for new certificates [${CA_CERT_C}]: "
    read -r CERT_C
    if [ -n "${CERT_C}" ]; then
        CA_CERT_C="${CERT_C}"
    fi

    echo -e -n "$INPUT Default state for new certificates [${CA_CERT_ST}]: "
    read -r CERT_ST
    if [ -n "${CERT_ST}" ]; then
        CA_CERT_ST="${CERT_ST}"
    fi

    echo -e -n "$INPUT Default city for new certificates [${CA_CERT_L}]: "
    read -r CERT_L
    if [ -n "${CERT_L}" ]; then
        CA_CERT_L="${CERT_L}"
    fi

    echo -e -n "$INPUT Default organization for new certificates [${CA_CERT_O}]: "
    read -r CERT_O
    if [ -n "${CERT_O}" ]; then
        CA_CERT_O="${CERT_O}"
    fi

    echo -e -n "$INPUT Default organization unit for new certificates [${CA_CERT_OU}]: "
    read -r CERT_OU
    if [ -n "${CERT_OU}" ]; then
        CA_CERT_OU="${CERT_OU}"
    fi

    echo

    cat > "${DEST}" << EOF
CA_DOMAIN="${CA_DOMAIN}"
CA_NAME="${CA_NAME}"

CA_CERT_C="${CA_CERT_C}"
CA_CERT_ST="${CA_CERT_ST}"
CA_CERT_L="${CA_CERT_L}"
CA_CERT_O="${CA_CERT_O}"
CA_CERT_OU="${CA_CERT_OU}"

CA_KEY_ALG="${CA_KEY_ALG}"
CA_KEY_LENGTH_ROOTCA="${CA_KEY_LENGTH_ROOTCA}"
CA_KEY_LENGTH_SIGNCA="${CA_KEY_LENGTH_SIGNCA}"
CA_KEY_LENGTH_ENDCRT="${CA_KEY_LENGTH_ENDCRT}"

CA_ENABLE_ENGINE="${CA_ENABLE_ENGINE}"
EOF
}

##
## ask_server_cert_quesetions
##
## Ask questions to fill a server certifcate
##
ask_server_cert_questions() {

    #echo -e -n "$INPUT Country code for new certificates [${CA_CERT_C}]: "
    #read -r CERT_C
    #if [ -n "${CERT_C}" ]; then
    #    CA_CERT_C="${CERT_C}"
    #fi

    #echo -e -n "$INPUT State for new certificates [${CA_CERT_ST}]: "
    #read -r CERT_ST
    #if [ -n "${CERT_ST}" ]; then
    #    CA_CERT_ST="${CERT_ST}"
    #fi

    echo -e -n "$INPUT City for new certificates [${CA_CERT_L}]: "
    read -r CERT_L
    if [ -n "${CERT_L}" ]; then
        CA_CERT_L="${CERT_L}"
    fi

    #echo -e -n "$INPUT Organization for new certificates [${CA_CERT_O}]: "
    #read -r CERT_O
    #if [ -n "${CERT_O}" ]; then
    #    CA_CERT_O="${CERT_O}"
    #fi

    echo -e -n "$INPUT Organization unit for new certificates [${CA_CERT_OU}]: "
    read -r CERT_OU
    if [ -n "${CERT_OU}" ]; then
        CA_CERT_OU="${CERT_OU}"
    fi
}

##
## ask_client_cert_quesetions
##
## Ask questions to fill a client certifcate
##
ask_client_cert_questions() {

    #echo -e -n "$INPUT Country code for new certificates [${CA_CERT_C}]: "
    #read -r CERT_C
    #if [ -n "${CERT_C}" ]; then
    #    CA_CERT_C="${CERT_C}"
    #fi

    #echo -e -n "$INPUT State for new certificates [${CA_CERT_ST}]: "
    #read -r CERT_ST
    #if [ -n "${CERT_ST}" ]; then
    #    CA_CERT_ST="${CERT_ST}"
    #fi

    echo -e -n "$INPUT City for new certificates [${CA_CERT_L}]: "
    read -r CERT_L
    if [ -n "${CERT_L}" ]; then
        CA_CERT_L="${CERT_L}"
    fi

    #echo -e -n "$INPUT Organization for new certificates [${CA_CERT_O}]: "
    #read -r CERT_O
    #if [ -n "${CERT_O}" ]; then
    #    CA_CERT_O="${CERT_O}"
    #fi

    echo -e -n "$INPUT Organization unit for new certificates [${CA_CERT_OU}]: "
    read -r CERT_OU
    if [ -n "${CERT_OU}" ]; then
        CA_CERT_OU="${CERT_OU}"
    fi

    echo -e -n "$INPUT Email Address (name@fqdn) for new certificates [${CA_CERT_MAIL}]: "
    read -r CERT_MAIL
    if [ -n "${CERT_MAIL}" ]; then
        CA_CERT_MAIL="${CERT_MAIL}"
    else
        echo -e "$ERR No email address supplied, exiting."
        exit 1
    fi
}

function generate_key(){
    local KEYPATH=$1
    echo -e "$NOTE Creating the key (${CA_KEY_ALG} with ${CA_KEY_LENGTH_ROOTCA} bits)"
    openssl genrsa -out $KEYPATH -"${CA_KEY_ALG}" -passout env:CA_PASS "${CA_KEY_LENGTH_ROOTCA}"
    chmod 0400 $KEYPATH
}
function generate_pubkey(){
    local KEYPATH=$1
    local PUBPATH=$2
    openssl rsa -in $KEYPATH -pubout -out $PUBPATH -passin env:CA_PASS
}
function generate_pubkey_pkcs11(){
    local KEYPATH=$1
    local PUBPATH=$2
    echo -e "$NOTE CA key should already exist via pkcs11 engine."
    openssl rsa -engine pkcs11 -inform engine \
                -in $KEYPATH -pubout -out $PUBPATH -passin env:CA_PASS
}

function generate_pubkey_ssh(){
    local PUBPATH=$1
    local SSHPUBPATH=$2
    local NAME=$3
    echo -e "$NOTE Creating SSH pub ($SSHPUBPATH)"
    echo -e "$NOTE Example in sshd_config: TrustedUserCAKeys ca.ssh.pub"

    ssh-keygen -f $PUBPATH -i -mPKCS8 \
            | awk "{printf \$0;print \" $3\"}" > $SSHPUBPATH
    ssh-keygen -lvf $SSHPUBPATH
}
##
## PKCS11 support functions, currently hard coded to support yubikeys using ykman
##
function init_slot(){
    local SLOT=$1
    local PUB=$2
    local SLOTPKCS=$3
    echo -e -n "$INPUT Do you wish to create a new key in slot $SLOT? [y/N]: "
    read -r SURE
    if [ "${SURE}" == "y" ] || [ "${SURE}" == "Y" ]; then
        ykman piv generate-key "$SLOT" "$PUB"
        # This cert is to make PKCS11 happy.
        # Should replace this with the proper cert later in the process.
        ykman piv generate-certificate "$SLOT" "$PUB" -s 'bootstrap'
    else
        generate_pubkey_pkcs11 "$SLOTPKCS" "$PUB"
    fi
}
function replace_crt(){
    local SLOT=$1
    local CERT=$2
    echo -e -n "$INPUT Do you wish to upload this cert to $SLOT? [y/N]: "
    read -r SURE
    if [ "${SURE}" == "y" ] || [ "${SURE}" == "Y" ]; then
        ykman piv import-certificate "$SLOT" "$2"
    fi
}
function init_engine(){
    echo -e "$NOTE THIS WILL RESET YOUR YUBIKEY USING YKMAN"
    echo -e "$NOTE Run 'ykman piv reset' on your own to set PIN/PUK/management keys properly."
    echo -e -n "$INPUT Do you wish to reset your device? [y/N]: "
    read -r SURE
    if [ "${SURE}" == "y" ] || [ "${SURE}" == "Y" ]; then
        ykman piv reset
    fi
}
#function openssl_engine() {
    #[ -z $ENABLE_ENGINE ] || echo "engine dynamic -pre \"SO_PATH:${cfg_file_engine_pkcs11}\" -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre \"MODULE_PATH:${cfg_file_opensc_pkcs11}\" ${ENGINE_VERBOSE:+"-pre VERBOSE"}"
#}

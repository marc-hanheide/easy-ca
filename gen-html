#!/usr/bin/env bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Derek Moore <derek.moore@gmail.com>
# Christian GÃ¶ttsche <cgzones@googlemail.com>

set -eu
set -o pipefail

umask 0077

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${BIN_DIR}/functions"
source "${BIN_DIR}/defaults.conf"

usage() {
    echo "Usage: $0 [-f]"
    echo "    Create a shareable html directory, containing the complete"
    echo "    certificate chain, as well as the certificate revokation list"
    echo
    echo "Options:"
    echo "    -f       Override existing html directory"
}

if [ ! -f ca/chain.pem ]; then
    echo -e "$ERR Must be run inside a CA directory!"
    exit 2
fi

FORCE=0

while getopts hf FLAG; do
    case $FLAG in
        h) echo -e -n "$SUCC " && usage && exit 0 ;;
        f) FORCE=1 ;;
        *) echo -e -n "$ERR " && usage && exit 2 ;;
        #xy) VAR=${OPTARG} ;;
    esac
done

if [ -d html ]; then
    if [ $FORCE -ne 1 ]; then
        echo -e "$ERR Html directory exists already!"
        echo "Specify -f to force removal"
        exit 2
    fi

    rm -Rf html/ca/
    rmdir html
fi

echo -e "$NOTE Creating directory structure"

mkdir html/
mkdir html/ca/

echo -e "$NOTE Generating HTML"

template "${BIN_DIR}/templates/html_header.tpl" html/ca/.index.html.tmp

# Write each part of the chain to html/ca/(name).crt
write=
parent_paths=
local_ca_sha256=$(openssl x509 -noout -fingerprint -sha256 -in ca/ca.crt | cut -d '=' -f 2-)
while read line; do
  if [ "$line" == "-----BEGIN CERTIFICATE-----" ]; then
    write=1
  fi
  if [ "$write" ]; then
    echo "$line" >> html/ca/.tmp.crt
  fi
  if [ "$line" == "-----END CERTIFICATE-----" ]; then
    # Stop writing
    write=
    # Parse certificate and move it into place
    CA_HTML_TITLE=$(openssl x509 -noout -subject -in html/ca/.tmp.crt -nameopt multiline | grep commonName | cut -d "=" -f 2- | sed 's/^ //')
    CA_HTML_NAME=$(echo "$CA_HTML_TITLE" | sed 's/\s\+/_/g')
    CA_HTML_SHA256=$(openssl x509 -noout -fingerprint -sha256 -in html/ca/.tmp.crt | cut -d '=' -f 2-)
    CA_HTML_SHA1=$(openssl x509 -noout -fingerprint -sha1 -in html/ca/.tmp.crt | cut -d '=' -f 2-)
    path="html/ca/$CA_HTML_NAME.crt"
    mv -f html/ca/.tmp.crt "$path"
    # Generate fullchain alternative, save cert path as (future) parent. Root
    # should be last in a fullchain file, so begin with current cert.
    cat $path $parent_paths > ${path%.crt}-fullchain.crt
    parent_paths="$path $parent_paths"

    # Add ca fragment to index file
    template -a "${BIN_DIR}/templates/html_ca_fragment.tpl" html/ca/.index.html.tmp

    # If we are currently looking at the CA hosted at the current directory, or
    # if the CRL for the CA is stored in the ca/, directory add a link to the crl
    if [ "$local_ca_sha256" = "$CA_HTML_SHA256" ]; then
      # Add crl fragment to index file
      template -a "${BIN_DIR}/templates/html_crl_fragment.tpl" html/ca/.index.html.tmp
      # Copy CRL in place
      cp ca/ca.crl html/ca/${CA_HTML_NAME}.crl
    elif [ -f "ca/${CA_HTML_NAME}.crl" ]; then
      # Add crl fragment to index file
      template -a "${BIN_DIR}/templates/html_crl_fragment.tpl" html/ca/.index.html.tmp
      # Copy CRL in place
      cp ca/${CA_HTML_NAME}.crl html/ca/${CA_HTML_NAME}.crl
    else
      echo -e "$NOTE No CRL information for $CA_HTML_TITLE, not generating link"
    fi

  fi

done < ca/chain.pem

# Finalize html
template -a "${BIN_DIR}/templates/html_footer.tpl" html/ca/.index.html.tmp
mv -f html/ca/.index.html.tmp html/ca/index.html

echo -e "$SUCC HTML directory successfully created"
